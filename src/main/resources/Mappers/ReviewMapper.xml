<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.movie.Review.mapper.ReviewMapper">
	<!-- test4 나중에 무시할 것 -->
	<select id="selectReviewListTest" resultType="map">
		SELECT 
			*
		FROM
			`review`
	</select>
	
	<!-- 이 유저가 이 영화에 대해 이미 쓴 리뷰가 있는 지 확인 - db에서 select -->
	<select id="selectMovieReviewByMovieIdAndUserOriginId" resultType="int">
		SELECT COUNT(*)
		FROM
			`review`
		WHERE
			`movieId` = #{movieId}
		AND
			`userId` = #{userOriginId}
	</select>
	
	<!-- 영화 리뷰 남기기 - db에 insert -->
	<insert id="insertReviewByMovieIdAndUserOriginId" parameterType="map">
		INSERT INTO `review`
		(
			`userId`
			,`movieId`
			,`userNickName`
			,`review`
			,`createdAt`
			,`updatedAt`
		)
		VALUES
		(
			#{userOriginId}
			, #{movieId}
			, #{userNickName}
			, #{review}
			, NOW()
			, NOW()
		)
	</insert>

	<!-- 특정 영화의 리뷰들 가져오기 - db에서 여러건 select -->
	<select id="selectMovieReviewListByMovieId" resultType="com.movie.Review.domain.Review">
		SELECT 
			`id`
			,`userId`
			,`movieId`
			,`userNickName`
			,`review`
			,`createdAt`
			,`updatedAt`
		FROM
			`review`
		WHERE
			`movieId` = #{movieId}
	</select>
	
	<!-- 특정 영화에 특정 유저가 쓴 리뷰 삭제하기 - db에서 delete -->
	<delete id="deleteReviewByMovieIdAndUserOriginId" parameterType="map">
		DELETE FROM
			`review`
		WHERE
			`movieId` = #{movieId}
		AND
			`userId` = #{userOriginId}
	</delete>
	
	<!-- total 리뷰 개수 - db에서 count select 해서 footer에 총 리뷰 개수 나타내기 위해 -->
	<select id="selectTotalReviewCount" resultType="int">
		SELECT COUNT(*)
		FROM
			`review`
	</select>
	
	<!-- 현재 로그인 되어있는 유저가 리뷰를 남긴 영화의 총 개수 가져오기 - db에서 count select / 0827 -->
	<select id="selectTotalReviewCountByUserOriginId" resultType="int">
		SELECT COUNT(*)
		FROM
			`review`
		WHERE
			`userId` = #{userOriginId}
	</select>
	
	<!-- 현재 로그인 되어있는 유저가 남긴 리뷰 정보들 가져오기 - db에서 select / 0827 -->
	<select id="selectReviewInfoByUserOriginId" resultType="com.movie.Review.domain.Review">
		SELECT 
			`id`
			,`userId`
			,`movieId`
			,`userNickName`
			,`review`
			,`createdAt`
			,`updatedAt`
		FROM
			`review`
		WHERE
			`userId` = #{userOriginId}
	</select>
	
	<!-- 특정 영화의 리뷰 리스트 페이지에서 바뀐 닉네임이 안뜨는 관계로 review테이블에서도 newUserNickName으로 바꿔주는 작업 / 0828 -->
	<update id="updateNickName" parameterType="map">
		UPDATE `review`
		SET
			`userNickName` = #{newUserNickName}
			, `updatedAt` = NOW()
		WHERE
			`userId`= #{userOriginId}
	</update>
</mapper>